{"version":3,"sources":["resources/Algo.PNG","resources/Walls_Video.gif","resources/Weight_Video.gif","resources/Search_Video.gif","resources/Point_Move_Video.gif","node/Node.js","node/Cell.js","header/Header.js","modal/modal-parts/StepOne.js","modal/modal-parts/StepThree.js","modal/modal-parts/StepFour.js","modal/modal-parts/StepFive.js","modal/modal-parts/StepTwo.js","modal/Modal.js","helpers/algo_helpers.js","algorithms/Dijkstras.js","App.js","algorithms/A_Star.js","index.js"],"names":["module","exports","Node","props","useState","cell","visited","isWall","wall","setWall","weight","hasWeight","setHasWeight","onMouseDown","e","preventDefault","lon","start","lat","setClicked","end","setDestinationClicked","setNormalNodeClicked","setWeight","onMouseUp","clicked","setStart","destinationClicked","setEnd","locationSetter","onMouseEnter","nodeDragHandler","normalNodeClicked","obstacleHandler","onMouseLeave","prevNodeDragHandler","id","className","Cell","maxLon","maxLat","this","distance","Infinity","north","east","south","west","h","f","prevNode","len","Math","floor","random","grid","algo","arr","push","filter","each","Header","dropdown","setDropdown","name","setName","chosenAlgo","setChosenAlgo","onClick","algoRunStatus","map","eachAlgo","index","event","nameParam","chosenParam","auto_reset_after_algo_ran_enabled","setReset","reset","mapCleanStatus","setMapCleanStatus","set_auto_reset_after_algo_ran_enabled","key","disabled","setAlgoRunStatus","algoRunner","StepOne","src","alt","StepThree","autoPlay","wallVideo","StepFour","weightVideo","StepFive","searchVideo","StepTwo","pointMoveVideo","Modal","JSON","parse","localStorage","getItem","display","setDisplay","page","setPage","safePageSetter","dir","setItem","shortestPath","endN","shortest","currentNode","unshift","count","animatePath","length","nodeClass","document","getElementById","setTimeout","dijkstras","nodes","startNode","endNode","isWeighted","visitedNodesInOrder","setDistance","unvisitedNodes","i","j","depthStack","recursion","closestNode","pop","sort","node1","node2","shift","visit","neighbors","findNeighbors","n","includes","alert","App","size","window","screen","parArr","setParArr","rows","availHeight","columns","availWidth","weightHandler","type","useEffect","eachArr","node","console","log","box","addEventListener","target","getElementsByClassName","removeEventListener","prevStartLocation","prevEndLocation","openList","closedList","HDistance","sqrt","aStar","eachPar","rowIdx","colIdx","ReactDOM","render"],"mappings":"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","file":"static/js/main.043bca70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Algo.fd97a678.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Walls_Video.397f54e9.gif\";","module.exports = __webpack_public_path__ + \"static/media/Weight_Video.8108ede9.gif\";","module.exports = __webpack_public_path__ + \"static/media/Search_Video.b86efad6.gif\";","module.exports = __webpack_public_path__ + \"static/media/Point_Move_Video.b0a96213.gif\";","import React, { useState } from 'react'\r\n\r\n\r\nconst Node = props => {\r\n    const [visited, setVisited] = useState(props.cell.visited)\r\n    const [wall, setWall] = useState(props.cell.isWall)\r\n    const [hasWeight, setHasWeight] = useState(props.cell.weight > 0 ? true : false)\r\n    const [random, setRandom] = useState(false)\r\n\r\n    const nodeClickHandler = e => {\r\n        e.preventDefault();\r\n        // Deals with first click of the mouse\r\n        if (props.cell.lon === props.start.lon && props.cell.lat === props.start.lat){\r\n            // Start Node Handler\r\n            props.setClicked(true)\r\n        } else if (props.cell.lon === props.end.lon && props.cell.lat === props.end.lat) {\r\n            // End Node Handler\r\n            props.setDestinationClicked(true)\r\n        } else if (props.weight) {\r\n            // Weight Node Handler\r\n            props.setNormalNodeClicked(true)\r\n            if (props.cell.weight === 0) {\r\n                props.cell.setWeight()\r\n                setHasWeight(true)\r\n            } \r\n        } else {\r\n            // Wall Node Handler When Clicking\r\n            props.setNormalNodeClicked(true)\r\n            props.cell.isWall = !props.cell.isWall\r\n        }\r\n    }\r\n\r\n    const locationSetter = e => {\r\n        e.preventDefault()\r\n        if (props.clicked) {\r\n            if (props.end.lon !== props.cell.lon || props.end.lat !== props.cell.lat){\r\n                props.setStart({lon: props.cell.lon, lat: props.cell.lat})\r\n            }\r\n        } else if (props.destinationClicked) {\r\n            if (props.start.lon !== props.cell.lon || props.start.lat !== props.cell.lat) {\r\n                props.setEnd({lon: props.cell.lon, lat: props.cell.lat})\r\n            }\r\n        }  \r\n    }\r\n\r\n    const obstacleHandler = e => {\r\n        e.preventDefault()\r\n\r\n        if (props.weight && props.normalNodeClicked) {\r\n            if (props.cell.weight === 0) {\r\n                props.cell.setWeight()\r\n                setHasWeight(true)\r\n            } \r\n        } else if (props.normalNodeClicked) {\r\n            // Wall Node Handler When Dragging While Clicked\r\n            setWall(!wall)\r\n            \r\n            props.cell.isWall = !props.cell.isWall\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div\r\n          onMouseDown={nodeClickHandler} \r\n          onMouseUp={(e) => {\r\n              props.setClicked(false); \r\n              props.setDestinationClicked(false); \r\n              props.setNormalNodeClicked(false); \r\n              locationSetter(e)\r\n            //   props.clicked !== props.destinationClicked && locationSetter(e)\r\n            }\r\n          } \r\n          onMouseEnter={(e) => {\r\n              props.nodeDragHandler(e, props.cell.lon, props.cell.lat); \r\n              obstacleHandler(e)\r\n            }\r\n          } \r\n          onMouseLeave={(e) => props.prevNodeDragHandler(e, props.cell.lon, props.cell.lat)}\r\n\r\n          id={`Row-${props.cell.lon}-Col-${props.cell.lat}`} \r\n          className={visited ? `square visited ${props.start.lon === props.cell.lon & props.start.lat === props.cell.lat ? 'start' : ' '} ${props.end.lon === props.cell.lon & props.end.lat === props.cell.lat ? 'end' : ' '}` : `square ${props.start.lon === props.cell.lon & props.start.lat === props.cell.lat ? 'start' : ' '} ${props.end.lon === props.cell.lon & props.end.lat === props.cell.lat ? 'end' : ' '} ${props.cell.isWall ? 'wall' : ''} ${hasWeight ? 'weighted' : ''}`}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Node","class Cell {\r\n    constructor(lon, lat, maxLon, maxLat) {\r\n        this.lon = lon\r\n        this.lat = lat\r\n        this.maxLon = maxLon\r\n        this.maxLat = maxLat\r\n        this.distance = Infinity\r\n        this.visited = false\r\n        this.north = this.lon === 0 ? false : true\r\n        this.east = this.lat === this.maxLat ? false : true\r\n        this.south = this.lon === this.maxLon ? false : true\r\n        this.west = this.lat === 0 ? false : true\r\n        this.weight = 0\r\n        this.h = 0\r\n        this.f = 0\r\n        this.prevNode = null\r\n        this.isWall = false\r\n    }\r\n\r\n    visit() {\r\n        this.visited = !this.visited\r\n        return this.visited\r\n    }\r\n\r\n    setDistance(len) {\r\n        this.distance = len\r\n    }\r\n\r\n    setWeight() {\r\n        this.weight = Math.floor(Math.random() * 10) + 1\r\n    }\r\n\r\n    findNeighbors(grid, algo) {\r\n        const arr = []\r\n        if (this.north) arr.push(grid[this.lon - 1][this.lat])\r\n        if (this.south) arr.push(grid[this.lon + 1][this.lat])\r\n        if (this.west) arr.push(grid[this.lon][this.lat - 1])\r\n        if (this.east) arr.push(grid[this.lon][this.lat + 1])\r\n        // if (algo === 'AStar'){\r\n        //     if (this.north && this.east) arr.push(grid[this.lon - 1][this.lat + 1])\r\n        //     if (this.south && this.east) arr.push(grid[this.lon + 1][this.lat + 1])\r\n        //     if (this.south && this.west) arr.push(grid[this.lon + 1][this.lat - 1])\r\n        //     if (this.north && this.west) arr.push(grid[this.lon - 1][this.lat - 1])\r\n        // }\r\n\r\n        return arr.filter(each => !each.visited)\r\n    }\r\n\r\n\r\n\r\n    coor() {\r\n        // console.log(this.lon, this.lat, this.maxLon, this.maxLat)\r\n        // console.log('north', this.north)\r\n        // console.log('east', this.east)\r\n        // console.log('south', this.south)\r\n        // console.log('west', this.west)\r\n    }\r\n}\r\n\r\nexport default Cell","import React, { useState } from 'react'\r\n\r\nconst Header = props => {\r\n    const [dropdown, setDropdown] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [chosenAlgo, setChosenAlgo] = useState('')\r\n\r\n    const classToggler = e => {\r\n        e.preventDefault()\r\n        if (dropdown === 'open') {\r\n            setDropdown('')\r\n        } else {\r\n            setDropdown('open')\r\n        }\r\n    }\r\n\r\n    const algoPicker = (event, nameParam, chosenParam) => {\r\n        event.preventDefault(); \r\n        setName(nameParam);\r\n        setChosenAlgo(chosenParam)\r\n    }\r\n\r\n    const algorithms = [\r\n        ['dij', 'Dijkstra'],\r\n        ['astar', 'A*'],\r\n        ['bfs', 'Breadth First'],\r\n        ['dfs', 'Depth First']\r\n    ]\r\n\r\n    // console.log(props.mapCleanStatus)\r\n\r\n    return (\r\n        <header onClick={e => dropdown && setDropdown('')} className=\"App-header\">\r\n            <h1>Algorithm Visualizer</h1>\r\n            <div onClick={!props.algoRunStatus && classToggler} className=\"custom-select-wrapper\">\r\n                <div className={`custom-select ${dropdown}`}>\r\n                    <div className=\"custom-select__trigger\"><span>{name ? name : 'Select an Algorithm'}</span>\r\n                        <div className=\"arrow\"></div>\r\n                    </div>\r\n                    <div className=\"custom-options\">\r\n                        {algorithms.map((eachAlgo, index) => (\r\n                            <span onClick={e => {algoPicker(e, eachAlgo[1], eachAlgo[0]); props.auto_reset_after_algo_ran_enabled && props.setReset(!props.reset); !props.mapCleanStatus && props.setMapCleanStatus(true); props.set_auto_reset_after_algo_ran_enabled(false)}} key={index} className={`custom-option ${name === eachAlgo[1] ? 'selected' : ''}`}>\r\n                                {eachAlgo[1]}\r\n                            </span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div> \r\n            <button disabled={chosenAlgo && props.mapCleanStatus && !props.algoRunStatus ? false : true} onClick={() => {props.setAlgoRunStatus(true); props.algoRunner(chosenAlgo); props.setMapCleanStatus(false); props.set_auto_reset_after_algo_ran_enabled(true)}}>Start</button>\r\n            <button disabled={props.algoRunStatus} onClick={() => {props.setReset(!props.reset); props.setMapCleanStatus(true); props.set_auto_reset_after_algo_ran_enabled(false)}}>Reset</button>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header","import React from 'react'\r\nimport algo from '../../resources/Algo.PNG'\r\nconst StepOne  = () => {\r\n    return (\r\n        <div className='steps-container'>\r\n            <h3>Step 1</h3>\r\n            <img className='step-image' src={algo} alt='List of Algorthms to choose from' />\r\n            <h4>Pick your desired Algorithm.</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StepOne","import React from 'react'\r\nimport wallVideo from '../../resources/Walls_Video.gif'\r\n\r\nconst StepThree = () => {\r\n    return (\r\n        <div className='steps-container'>\r\n            <h3>Step 3 (Optional)</h3>\r\n            <img className='step-image' autoPlay src={wallVideo} alt='GIF demonstration of creating walls' />\r\n            <h4>Click your <span>left mouse button</span> to turn a single Cell into a wall.</h4>\r\n            <h4>Click your <span>left mouse button</span> and drag it to turn several Cells into walls.</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StepThree","import React from 'react'\r\nimport weightVideo from '../../resources/Weight_Video.gif'\r\n\r\nconst StepFour = () => {\r\n\r\n    return (\r\n        <div className='steps-container'>\r\n            <h3>Step 4 (Optional)</h3>\r\n            <img className='step-image' src={weightVideo} alt='GIF demonstration of creating Weighted Obstacles' />\r\n            <h4>With <span>weighted</span> Algorithms you can create Weighted Obstacles</h4>\r\n            <h4>In order to create <span>Weighted Obstacles</span> press <span>\"W + Left Button of your Mouse\"</span></h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StepFour","import React from 'react'\r\nimport searchVideo from '../../resources/Search_Video.gif'\r\nconst StepFive = () => {\r\n\r\n    return (\r\n        <div className='steps-container'>\r\n            <h3>Step 5</h3>\r\n            <img className='step-image' autoPlay src={searchVideo} alt='GIF demonstration of finding Shortest Path' />\r\n            <h4>Once you have selected your desired <span>Algorithm</span>, you can press <span>START</span> Button.</h4>\r\n            <h4>This will demonstrate how the specified Algorithm traverses the map to find the <span>Shortest Path</span>.</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StepFive","import React from 'react'\r\nimport pointMoveVideo from '../../resources/Point_Move_Video.gif'\r\n\r\nconst StepTwo = () => {\r\n    return (\r\n        <div className='steps-container'>\r\n            <h3>Step 2 (Optional)</h3>\r\n            <img className='step-image' autoPlay src={pointMoveVideo} alt='GIF demonstration of creating walls' />\r\n            <h4><span>Green Node</span> is your Starting point.</h4>\r\n            <h4><span>Light Spy Blue Node</span> is your Destination point.</h4>\r\n            <h4>You can click with your <span>Left Mouse Button</span> on either of the two, and change their locations.</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StepTwo","import React, { useState } from 'react'\r\nimport StepOne from './modal-parts/StepOne.js'\r\nimport StepThree from './modal-parts/StepThree.js'\r\nimport StepFour from './modal-parts/StepFour.js'\r\nimport StepFive from './modal-parts/StepFive.js'\r\nimport StepTwo from './modal-parts/StepTwo.js'\r\n\r\nconst Modal = props => {\r\n    const [display, setDisplay] = useState(JSON.parse(!localStorage.getItem('modal-state-disabled')))\r\n    const [page, setPage] = useState(1)\r\n    const safePageSetter = (e, dir) => {\r\n        e.preventDefault()\r\n\r\n        if (dir === 'prev' && page > 1) {\r\n            setPage(page - 1)\r\n        } else if (dir === 'next' && page < 5) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    return (\r\n        <div className={`Modal-Container${!display ? ' none' : ''}`}>\r\n            <div className='modal'>\r\n                <div className='modal-top-section'>\r\n                    <h1>Welcome to Algorithm Visualizer!</h1>\r\n                </div>\r\n                {page === 1 && <StepOne />}\r\n                {page === 2 && <StepTwo />}\r\n                {page === 3 && <StepThree />}\r\n                {page === 4 && <StepFour />}\r\n                {page === 5 && <StepFive />}\r\n                <div className='modal-nav-buttons'>\r\n                    <button onClick={() => {localStorage.setItem('modal-state-disabled', 'true'); setDisplay(false)}}>Don't Show Again</button>\r\n                    <div>\r\n                        <button onClick={(e) => safePageSetter(e, 'prev')} disabled={page === 1 ? true :  false}>Previous</button>\r\n                        {page === 5 ? <button onClick={() => setDisplay(false)}>Close</button> : <button onClick={(e) => safePageSetter(e, 'next')}>Next</button>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","export function shortestPath(endN, setAlgoRunStatus) {\r\n    const shortest = []\r\n    let currentNode = endN\r\n\r\n    \r\n\r\n    while (currentNode) {\r\n        shortest.unshift(currentNode)\r\n        currentNode = currentNode.prevNode\r\n    }\r\n\r\n    let count = 0\r\n\r\n    function animatePath() {\r\n        if (count < shortest.length) {\r\n            let nodeClass = `Row-${shortest[count].lon}-Col-${shortest[count].lat}`\r\n            document.getElementById(nodeClass).className = `${document.getElementById(nodeClass).className} shortest`\r\n            count += 1\r\n            setTimeout(() => {\r\n                return animatePath()\r\n            }, 20)\r\n            \r\n        }  \r\n    }\r\n\r\n    animatePath()\r\n    \r\n    //Enables the Reset Button!\r\n    setAlgoRunStatus(false)\r\n\r\n    \r\n    // for (let node of shortest) {\r\n    //     let nodeClass = `Row-${node.lon}-Col-${node.lat}`\r\n    //     document.getElementById(nodeClass).className = `${document.getElementById(nodeClass).className} shortest`\r\n    // }\r\n}","import { shortestPath } from '../helpers/algo_helpers.js'\r\n\r\nexport function dijkstras(nodes, startNode, endNode, isWeighted, algo, setAlgoRunStatus) {\r\n    const visitedNodesInOrder = []\r\n    startNode.setDistance(0)\r\n    const unvisitedNodes = []\r\n    for (let i of nodes) {\r\n        for (let j of i) {\r\n            unvisitedNodes.push(j)\r\n        }\r\n    }\r\n\r\n    const depthStack = [startNode]\r\n\r\n    function recursion() {\r\n        let closestNode\r\n        \r\n        if (algo === 'depth_first') {\r\n            closestNode = depthStack.pop()\r\n        } else {\r\n            unvisitedNodes.sort((node1, node2) => node1.distance - node2.distance)\r\n            closestNode = unvisitedNodes.shift()\r\n        }\r\n\r\n        if (!closestNode || closestNode.distance === Infinity) {alert('There is no path to final destination!'); return}\r\n        if (closestNode.isWall || closestNode.visited) return recursion()\r\n        \r\n        closestNode.visit()\r\n        \r\n        visitedNodesInOrder.push(closestNode)\r\n    \r\n        if(closestNode.lon === endNode.lon && closestNode.lat === endNode.lat) return shortestPath(endNode, setAlgoRunStatus)\r\n        \r\n        document.getElementById(`Row-${closestNode.lon}-Col-${closestNode.lat}`).className = `${document.getElementById(`Row-${closestNode.lon}-Col-${closestNode.lat}`).className} visited`\r\n\r\n        const neighbors = closestNode.findNeighbors(nodes)\r\n    \r\n        for (let n of neighbors) {\r\n            if (isWeighted) {\r\n                n.setDistance(closestNode.distance + 1 + closestNode.weight)\r\n            } else {\r\n                n.setDistance(closestNode.distance + 1)\r\n            }\r\n\r\n            n.prevNode = closestNode\r\n            if (algo === 'depth_first') {\r\n                if (!visitedNodesInOrder.includes(n)) depthStack.push(n)\r\n            }\r\n        }\r\n\r\n        setTimeout(() => {\r\n            return recursion()\r\n        }, 10)\r\n    }\r\n\r\n    recursion()\r\n    \r\n}","import React, {useState, useEffect} from 'react';\r\n// import logo from './logo.svg';\r\n\r\nimport Node from './node/Node.js'\r\nimport Cell from './node/Cell.js'\r\n\r\n// Components\r\nimport Header from './header/Header.js'\r\nimport Modal from './modal/Modal.js'\r\n\r\n// **** Path Finding Algorithms ****\r\nimport { dijkstras } from './algorithms/Dijkstras.js'\r\nimport { aStar } from './algorithms/A_Star.js'\r\nimport { bi_aStar } from './algorithms/Bidirectional_A_Star'\r\n\r\nfunction App() {\r\n  const size = window.screen\r\n  const [parArr, setParArr] = useState([])\r\n  let rows = Math.floor((size.availHeight / 100 * 70) / 20)\r\n  let columns = Math.floor((size.availWidth / 100 * 90) / 20)\r\n  const [start, setStart] = useState({lon: Math.floor(rows / 2), lat: Math.floor(columns / 4)})\r\n  const [end, setEnd] = useState({lon: Math.floor(rows / 2), lat: Math.floor(columns / 4) * 3})\r\n  const [clicked, setClicked] = useState(false)\r\n  const [destinationClicked, setDestinationClicked] = useState(false)\r\n  const [normalNodeClicked, setNormalNodeClicked] = useState(false) \r\n  const [weight, setWeight] = useState(false)\r\n  const [reset, setReset] = useState(false)\r\n  const [algoRunStatus, setAlgoRunStatus] = useState(false)\r\n  const [mapCleanStatus, setMapCleanStatus] = useState(true)\r\n  const [auto_reset_after_algo_ran_enabled, set_auto_reset_after_algo_ran_enabled] = useState(false)\r\n  const weightHandler = e => {\r\n    // console.log(e.type)\r\n    if (e.key === 'w' && e.type === 'keydown'){\r\n      setWeight(true)\r\n    } else {\r\n      setWeight(false)\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    parArr.map(eachArr => (\r\n      eachArr.map(node => {\r\n        node.distance = Infinity\r\n        node.visited = false\r\n        node.weight = 0\r\n        node.h = 0\r\n        node.f = 0\r\n        node.prevNode = null\r\n        node.isWall = false\r\n        if ((node.lat !== start.lat || node.lon !== start.lon) && (node.lat !== end.lat || node.lon !== end.lon)){\r\n          document.getElementById(`Row-${node.lon}-Col-${node.lat}`).className = `square`\r\n        } else if (node.lat === start.lat && node.lon === start.lon) {\r\n          document.getElementById(`Row-${node.lon}-Col-${node.lat}`).className = `square start`\r\n        } else if (node.lat === end.lat && node.lon === end.lon) {\r\n          document.getElementById(`Row-${node.lon}-Col-${node.lat}`).className = `square end`\r\n        }\r\n        \r\n      })\r\n    ))\r\n    if (!auto_reset_after_algo_ran_enabled){\r\n      console.log('Array Ran')\r\n      setParArr([])\r\n      for (let j = 0; j < rows; j++) {\r\n        const box = []\r\n    \r\n        for (let i = 0; i < columns; i++) {\r\n          const cell = new Cell(j, i, rows - 1, columns - 1)\r\n    \r\n          box.push(cell)\r\n        }\r\n        \r\n        setParArr(parArr => [...parArr, box])\r\n      }\r\n    }\r\n    \r\n\r\n    window.addEventListener('keydown', e => weightHandler(e, 'down'))\r\n    window.addEventListener('keyup', e => weightHandler(e, 'up'))\r\n    window.addEventListener('click', e => {\r\n      if (e.target.className === 'Modal-Container') {\r\n        document.getElementsByClassName('Modal-Container')[0].className = 'Modal-Container none'\r\n      }  \r\n    })\r\n    \r\n    return () => {\r\n      window.removeEventListener('keydown', (e) => weightHandler(e, 'down'))\r\n      window.removeEventListener('keyup', (e) => weightHandler(e, 'up'))\r\n      window.removeEventListener('click', e => {\r\n        if (e.target.className === 'Modal-Container') {\r\n          document.getElementsByClassName('Modal-Container')[0].className = 'Modal-Container none'\r\n        }  \r\n      })\r\n    }\r\n    \r\n  }, [reset])\r\n\r\n  const algoRunner = name => {\r\n    if (name === 'astar') aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], setAlgoRunStatus)\r\n    if (name === 'dij') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], true, 'dijkstra', setAlgoRunStatus)\r\n    if (name === 'bfs') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], false, 'breadth_first', setAlgoRunStatus)\r\n    if (name === 'dfs') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], false, 'depth_first', setAlgoRunStatus)\r\n    // if (name === 'bi_astar') bi_aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n    // setAlgoRunStatus(false)\r\n  }\r\n\r\n  let prevStartLocation = start\r\n  let prevEndLocation = end\r\n  const nodeDragHandler = (e, lon, lat) => {\r\n    e.preventDefault();\r\n\r\n    if (clicked) {\r\n      if(lon !== end.lon || lat !== end.lat) {\r\n        document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className = `square`\r\n        \r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = `${document.getElementById(`Row-${lon}-Col-${lat}`).className} visited start`\r\n        prevStartLocation = {lon, lat}\r\n      } else {\r\n        document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className = `${document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className} visited start`\r\n        setStart(prevStartLocation)\r\n      }\r\n    } else if (destinationClicked) {\r\n      if (lon !== start.lon || lat !== start.lat) {\r\n        document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className = `square`\r\n\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = `${document.getElementById(`Row-${lon}-Col-${lat}`).className} visited end`\r\n        prevEndLocation = {lon, lat}\r\n      } else {\r\n        document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className = `${document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className} visited end`\r\n        setEnd(prevEndLocation)\r\n      }\r\n    }\r\n  }\r\n\r\n  const prevNodeDragHandler = (e, lon, lat) => {\r\n    e.preventDefault();\r\n    \r\n    if (clicked) {\r\n      if(lon !== end.lon || lat !== end.lat) {\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = 'square'\r\n      }\r\n    } else if (destinationClicked) {\r\n      if(lon !== start.lon || lat !== start.lat) {\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = 'square'\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div  className=\"App\">\r\n\r\n      <Header \r\n        algoRunner={algoRunner}\r\n        reset={reset}\r\n        setReset={setReset}\r\n        algoRunStatus={algoRunStatus}\r\n        setAlgoRunStatus={setAlgoRunStatus}\r\n        mapCleanStatus={mapCleanStatus}\r\n        setMapCleanStatus={setMapCleanStatus}\r\n        auto_reset_after_algo_ran_enabled={auto_reset_after_algo_ran_enabled}\r\n        set_auto_reset_after_algo_ran_enabled={set_auto_reset_after_algo_ran_enabled}\r\n      />\r\n\r\n      <Modal />\r\n\r\n      <div className=\"maze\">\r\n        <div>\r\n          {parArr.map((eachPar, rowIdx) => (\r\n            <div key={`Row-${rowIdx}`} className='flex'>\r\n              {eachPar.map((each, colIdx) => (\r\n                <Node \r\n                  key={`Column-${colIdx}`}\r\n                  cell={each}\r\n                  grid={parArr}\r\n                  start={start}\r\n                  end={end}\r\n                  nodeDragHandler={nodeDragHandler}\r\n                  prevNodeDragHandler={prevNodeDragHandler}\r\n                  setStart={setStart}\r\n                  setEnd={setEnd}\r\n                  clicked={clicked}\r\n                  setClicked={setClicked}\r\n                  destinationClicked={destinationClicked}\r\n                  setDestinationClicked={setDestinationClicked}\r\n                  normalNodeClicked={normalNodeClicked}\r\n                  setNormalNodeClicked={setNormalNodeClicked}\r\n                  weight={weight}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n// https://dmitripavlutin.com/use-react-memo-wisely/\r\n// https://staleclosures.dev/preventing-list-rerenders/\r\n// https://dev.to/maikomiyazaki/completed-javascript-data-structure-course-and-here-is-what-i-learned-about-graph-dijkstra-algorithm-57n8\r\nexport default App;\r\n","import { shortestPath } from '../helpers/algo_helpers.js'\r\n\r\nexport function aStar(nodes, startNode, endNode, setAlgoRunStatus) {\r\n    const openList = []\r\n    const closedList = []\r\n    // This is gonna be the F of the A* algo equation\r\n    startNode.setDistance(0)\r\n    openList.push(startNode)\r\n\r\n    function recursion() {\r\n        let currentNode = openList.sort((node1, node2) => node1.distance - node2.distance).shift()\r\n\r\n        closedList.push(currentNode)\r\n\r\n        if (currentNode === endNode) return shortestPath(endNode, setAlgoRunStatus)\r\n        if (!currentNode) {alert('There is no path to final destination!'); return}\r\n        if (currentNode.isWall) return recursion()\r\n\r\n        currentNode.visit()\r\n        \r\n        document.getElementById(`Row-${currentNode.lon}-Col-${currentNode.lat}`).className = `${document.getElementById(`Row-${currentNode.lon}-Col-${currentNode.lat}`).className} visited`\r\n        let neighbors = currentNode.findNeighbors(nodes, 'AStar')\r\n        for (let n of neighbors) {\r\n            if (closedList.includes(n)) continue\r\n\r\n            //Replace the \"currentNode\" with \"n\" and the path will change!!! \r\n            let HDistance = Math.sqrt(((n.lon - endNode.lon) ** 2) + ((n.lat - endNode.lat) ** 2))\r\n            n.h = currentNode.h + 1\r\n            n.setDistance(n.h + currentNode.weight + HDistance)\r\n\r\n            n.prevNode = currentNode\r\n\r\n            if (!openList.includes(n)) openList.push(n)\r\n        }\r\n\r\n        setTimeout(() => {\r\n            return recursion()\r\n        }, 10)\r\n    }\r\n\r\n    recursion()\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/base.scss';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n// console.log = console.warn = console.error = console.assert = () => {};\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}