{"version":3,"sources":["node/Node.js","node/Cell.js","header/Header.js","helpers/algo_helpers.js","algorithms/Dijkstras.js","App.js","algorithms/A_Star.js","index.js"],"names":["Node","props","useState","cell","visited","isWall","wall","setWall","weight","hasWeight","setHasWeight","onMouseDown","e","preventDefault","lon","start","lat","setClicked","end","setDestinationClicked","setNormalNodeClicked","setWeight","nodeClickHandler","onMouseUp","clicked","setStart","destinationClicked","setEnd","locationSetter","onMouseEnter","nodeDragHandler","normalNodeClicked","obstacleHandler","onMouseLeave","prevNodeDragHandler","onClick","id","className","Cell","maxLon","maxLat","this","distance","Infinity","north","east","south","west","h","f","prevNode","len","Math","floor","random","grid","algo","arr","push","filter","each","Header","dropdown","setDropdown","name","setName","chosenAlgo","setChosenAlgo","algoRunStatus","map","eachAlgo","index","event","nameParam","chosenParam","setReset","reset","mapCleanStatus","setMapCleanStatus","key","disabled","setAlgoRunStatus","algoRunner","shortestPath","endN","shortest","currentNode","unshift","count","animatePath","length","nodeClass","document","getElementById","setTimeout","dijkstras","nodes","startNode","endNode","isWeighted","visitedNodesInOrder","setDistance","unvisitedNodes","i","j","depthStack","recursion","closestNode","pop","sort","node1","node2","shift","visit","neighbors","findNeighbors","n","includes","alert","App","size","window","screen","parArr","setParArr","rows","availHeight","columns","availWidth","weightHandler","type","useEffect","eachArr","node","box","addEventListener","prevStartLocation","prevEndLocation","openList","closedList","HDistance","sqrt","aStar","eachPar","rowIdx","colIdx","ReactDOM","render"],"mappings":"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","file":"static/js/main.1b974c82.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nconst Node = props => {\r\n    const [visited, setVisited] = useState(props.cell.visited)\r\n    const [wall, setWall] = useState(props.cell.isWall)\r\n    const [hasWeight, setHasWeight] = useState(props.cell.weight > 0 ? true : false)\r\n\r\n    const clickHandler = () => {\r\n        // setVisited(props.cell.visit())\r\n    }\r\n\r\n    const nodeClickHandler = e => {\r\n        e.preventDefault();\r\n        // Deals with first click of the mouse\r\n        if (props.cell.lon === props.start.lon && props.cell.lat === props.start.lat){\r\n            // Start Node Handler\r\n            props.setClicked(true)\r\n        } else if (props.cell.lon === props.end.lon && props.cell.lat === props.end.lat) {\r\n            // End Node Handler\r\n            props.setDestinationClicked(true)\r\n        } else if (props.weight) {\r\n            // Weight Node Handler\r\n            props.setNormalNodeClicked(true)\r\n            if (props.cell.weight === 0) {\r\n                props.cell.setWeight()\r\n                setHasWeight(true)\r\n            } \r\n        } else {\r\n            // Wall Node Handler\r\n            props.setNormalNodeClicked(true)\r\n            setWall(!wall)\r\n            props.cell.isWall = !props.cell.isWall\r\n        }\r\n    }\r\n\r\n    const locationSetter = e => {\r\n        e.preventDefault()\r\n        if (props.clicked) {\r\n            if (props.end.lon !== props.cell.lon || props.end.lat !== props.cell.lat){\r\n                props.setStart({lon: props.cell.lon, lat: props.cell.lat})\r\n            }\r\n        } else if (props.destinationClicked) {\r\n            if (props.start.lon !== props.cell.lon || props.start.lat !== props.cell.lat) {\r\n                props.setEnd({lon: props.cell.lon, lat: props.cell.lat})\r\n            }\r\n        }  \r\n    }\r\n\r\n    const obstacleHandler = e => {\r\n        e.preventDefault()\r\n        if (props.weight && props.normalNodeClicked) {\r\n            if (props.cell.weight === 0) {\r\n                props.cell.setWeight()\r\n                setHasWeight(true)\r\n            } \r\n        } else if (props.normalNodeClicked) {\r\n            setWall(!wall)\r\n            props.cell.isWall = !props.cell.isWall\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div\r\n          onMouseDown={(e) => nodeClickHandler(e)} \r\n          onMouseUp={(e) => {\r\n              props.setClicked(false); \r\n              props.setDestinationClicked(false); \r\n              props.setNormalNodeClicked(false); \r\n              locationSetter(e)\r\n            //   props.clicked !== props.destinationClicked && locationSetter(e)\r\n            }\r\n          } \r\n          onMouseEnter={(e) => {props.nodeDragHandler(e, props.cell.lon, props.cell.lat); obstacleHandler(e)}} \r\n          onMouseLeave={(e) => props.prevNodeDragHandler(e, props.cell.lon, props.cell.lat)}\r\n          onClick={() => {clickHandler()}} \r\n\r\n          id={`Row-${props.cell.lon}-Col-${props.cell.lat}`} \r\n          className={visited ? `square visited ${props.start.lon === props.cell.lon & props.start.lat === props.cell.lat ? 'start' : ' '} ${props.end.lon === props.cell.lon & props.end.lat === props.cell.lat ? 'end' : ' '}` : `square ${props.start.lon === props.cell.lon & props.start.lat === props.cell.lat ? 'start' : ' '} ${props.end.lon === props.cell.lon & props.end.lat === props.cell.lat ? 'end' : ' '} ${wall ? 'wall' : ''} ${hasWeight ? 'weighted' : ''}`}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Node","class Cell {\r\n    constructor(lon, lat, maxLon, maxLat) {\r\n        this.lon = lon\r\n        this.lat = lat\r\n        this.maxLon = maxLon\r\n        this.maxLat = maxLat\r\n        this.distance = Infinity\r\n        this.visited = false\r\n        this.north = this.lon === 0 ? false : true\r\n        this.east = this.lat === this.maxLat ? false : true\r\n        this.south = this.lon === this.maxLon ? false : true\r\n        this.west = this.lat === 0 ? false : true\r\n        this.weight = 0\r\n        this.h = 0\r\n        this.f = 0\r\n        this.prevNode = null\r\n        this.isWall = false\r\n    }\r\n\r\n    visit() {\r\n        this.visited = !this.visited\r\n        return this.visited\r\n    }\r\n\r\n    setDistance(len) {\r\n        this.distance = len\r\n    }\r\n\r\n    setWeight() {\r\n        this.weight = Math.floor(Math.random() * 10) + 1\r\n    }\r\n\r\n    findNeighbors(grid, algo) {\r\n        const arr = []\r\n        if (this.north) arr.push(grid[this.lon - 1][this.lat])\r\n        if (this.south) arr.push(grid[this.lon + 1][this.lat])\r\n        if (this.west) arr.push(grid[this.lon][this.lat - 1])\r\n        if (this.east) arr.push(grid[this.lon][this.lat + 1])\r\n        // if (algo === 'AStar'){\r\n        //     if (this.north && this.east) arr.push(grid[this.lon - 1][this.lat + 1])\r\n        //     if (this.south && this.east) arr.push(grid[this.lon + 1][this.lat + 1])\r\n        //     if (this.south && this.west) arr.push(grid[this.lon + 1][this.lat - 1])\r\n        //     if (this.north && this.west) arr.push(grid[this.lon - 1][this.lat - 1])\r\n        // }\r\n\r\n        return arr.filter(each => !each.visited)\r\n    }\r\n\r\n\r\n\r\n    coor() {\r\n        // console.log(this.lon, this.lat, this.maxLon, this.maxLat)\r\n        // console.log('north', this.north)\r\n        // console.log('east', this.east)\r\n        // console.log('south', this.south)\r\n        // console.log('west', this.west)\r\n    }\r\n}\r\n\r\nexport default Cell","import React, { useState } from 'react'\r\n\r\nconst Header = props => {\r\n    const [dropdown, setDropdown] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [chosenAlgo, setChosenAlgo] = useState('')\r\n\r\n    const classToggler = e => {\r\n        e.preventDefault()\r\n        if (dropdown === 'open') {\r\n            setDropdown('')\r\n        } else {\r\n            setDropdown('open')\r\n        }\r\n    }\r\n\r\n    const algoPicker = (event, nameParam, chosenParam) => {\r\n        event.preventDefault(); \r\n        setName(nameParam);\r\n        setChosenAlgo(chosenParam)\r\n    }\r\n\r\n    const algorithms = [\r\n        ['dij', 'Dijkstra'],\r\n        ['astar', 'A*'],\r\n        ['bfs', 'Breadth First'],\r\n        ['dfs', 'Depth First']\r\n    ]\r\n\r\n    // console.log(props.mapCleanStatus)\r\n\r\n    return (\r\n        <header onClick={e => dropdown && setDropdown('')} className=\"App-header\">\r\n            <h1>Algorithm Visualizer</h1>\r\n           <div onClick={!props.algoRunStatus && classToggler} className=\"custom-select-wrapper\">\r\n                <div className={`custom-select ${dropdown}`}>\r\n                    <div className=\"custom-select__trigger\"><span>{name ? name : 'Select an Algorithm'}</span>\r\n                        <div className=\"arrow\"></div>\r\n                    </div>\r\n                    <div className=\"custom-options\">\r\n                        {algorithms.map((eachAlgo, index) => (\r\n                            <span onClick={e => {algoPicker(e, eachAlgo[1], eachAlgo[0]); props.setReset(!props.reset); !props.mapCleanStatus && props.setMapCleanStatus(true)}} key={index} className={`custom-option ${name === eachAlgo[1] ? 'selected' : ''}`}>\r\n                                {eachAlgo[1]}\r\n                            </span>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div> \r\n            <button disabled={chosenAlgo && props.mapCleanStatus && !props.algoRunStatus ? false : true} onClick={() => {props.setAlgoRunStatus(true); props.algoRunner(chosenAlgo); props.setMapCleanStatus(false)}}>Start</button>\r\n            <button disabled={props.algoRunStatus} onClick={() => {props.setReset(!props.reset); props.setMapCleanStatus(true)}}>Reset</button>\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header","export function shortestPath(endN, setAlgoRunStatus) {\r\n    const shortest = []\r\n    let currentNode = endN\r\n\r\n    \r\n\r\n    while (currentNode) {\r\n        shortest.unshift(currentNode)\r\n        currentNode = currentNode.prevNode\r\n    }\r\n\r\n    let count = 0\r\n\r\n    function animatePath() {\r\n        if (count < shortest.length) {\r\n            let nodeClass = `Row-${shortest[count].lon}-Col-${shortest[count].lat}`\r\n            document.getElementById(nodeClass).className = `${document.getElementById(nodeClass).className} shortest`\r\n            count += 1\r\n            setTimeout(() => {\r\n                return animatePath()\r\n            }, 20)\r\n            \r\n        }  \r\n    }\r\n\r\n    animatePath()\r\n    \r\n    //Enables the Reset Button!\r\n    setAlgoRunStatus(false)\r\n\r\n    \r\n    // for (let node of shortest) {\r\n    //     let nodeClass = `Row-${node.lon}-Col-${node.lat}`\r\n    //     document.getElementById(nodeClass).className = `${document.getElementById(nodeClass).className} shortest`\r\n    // }\r\n}","import { shortestPath } from '../helpers/algo_helpers.js'\r\n\r\nexport function dijkstras(nodes, startNode, endNode, isWeighted, algo, setAlgoRunStatus) {\r\n    const visitedNodesInOrder = []\r\n    startNode.setDistance(0)\r\n    const unvisitedNodes = []\r\n    for (let i of nodes) {\r\n        for (let j of i) {\r\n            unvisitedNodes.push(j)\r\n        }\r\n    }\r\n\r\n    const depthStack = [startNode]\r\n\r\n    function recursion() {\r\n        let closestNode\r\n        \r\n        if (algo === 'depth_first') {\r\n            closestNode = depthStack.pop()\r\n        } else {\r\n            unvisitedNodes.sort((node1, node2) => node1.distance - node2.distance)\r\n            closestNode = unvisitedNodes.shift()\r\n        }\r\n\r\n        if (!closestNode || closestNode.distance === Infinity) {alert('There is no path to final destination!'); return}\r\n        if (closestNode.isWall || closestNode.visited) return recursion()\r\n        \r\n        closestNode.visit()\r\n        \r\n        visitedNodesInOrder.push(closestNode)\r\n    \r\n        if(closestNode.lon === endNode.lon && closestNode.lat === endNode.lat) return shortestPath(endNode, setAlgoRunStatus)\r\n        \r\n        document.getElementById(`Row-${closestNode.lon}-Col-${closestNode.lat}`).className = `${document.getElementById(`Row-${closestNode.lon}-Col-${closestNode.lat}`).className} visited`\r\n\r\n        const neighbors = closestNode.findNeighbors(nodes)\r\n    \r\n        for (let n of neighbors) {\r\n            if (isWeighted) {\r\n                n.setDistance(closestNode.distance + 1 + closestNode.weight)\r\n            } else {\r\n                n.setDistance(closestNode.distance + 1)\r\n            }\r\n\r\n            n.prevNode = closestNode\r\n            if (algo === 'depth_first') {\r\n                if (!visitedNodesInOrder.includes(n)) depthStack.push(n)\r\n            }\r\n        }\r\n\r\n        setTimeout(() => {\r\n            return recursion()\r\n        }, 10)\r\n    }\r\n\r\n    recursion()\r\n    \r\n}","import React, {useState, useEffect} from 'react';\r\n// import logo from './logo.svg';\r\n\r\nimport Node from './node/Node.js'\r\nimport Cell from './node/Cell.js'\r\n\r\nimport Header from './header/Header.js'\r\n\r\n// **** Path Finding Algorithms ****\r\nimport { dijkstras } from './algorithms/Dijkstras.js'\r\nimport { aStar } from './algorithms/A_Star.js'\r\nimport { bi_aStar } from './algorithms/Bidirectional_A_Star'\r\n\r\nfunction App() {\r\n  const size = window.screen\r\n  const [parArr, setParArr] = useState([])\r\n  let rows = Math.floor((size.availHeight / 100 * 70) / 20)\r\n  let columns = Math.floor((size.availWidth / 100 * 90) / 20)\r\n  const [start, setStart] = useState({lon: 13, lat: 20})\r\n  const [end, setEnd] = useState({lon: 13, lat: 40})\r\n  const [clicked, setClicked] = useState(false)\r\n  const [destinationClicked, setDestinationClicked] = useState(false)\r\n  const [normalNodeClicked, setNormalNodeClicked] = useState(false) \r\n  const [weight, setWeight] = useState(false)\r\n  const [reset, setReset] = useState(false)\r\n  const [algoRunStatus, setAlgoRunStatus] = useState(false)\r\n  const [mapCleanStatus, setMapCleanStatus] = useState(true)\r\n\r\n  const weightHandler = e => {\r\n    // console.log(e.type)\r\n    if (e.key === 'w' && e.type === 'keydown'){\r\n      setWeight(true)\r\n    } else {\r\n      setWeight(false)\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    parArr.map(eachArr => (\r\n      eachArr.map(node => {\r\n        if ((node.lat !== start.lat || node.lon !== start.lon) && (node.lat !== end.lat || node.lon !== end.lon)){\r\n          document.getElementById(`Row-${node.lon}-Col-${node.lat}`).className = `square`\r\n        } else if (node.lat === start.lat && node.lon === start.lon) {\r\n          document.getElementById(`Row-${node.lon}-Col-${node.lat}`).className = `square start`\r\n        } else if (node.lat === end.lat && node.lon === end.lon) {\r\n          document.getElementById(`Row-${node.lon}-Col-${node.lat}`).className = `square end`\r\n        }\r\n        \r\n      })\r\n    ))\r\n    setParArr([])\r\n    for (let j = 0; j < rows; j++) {\r\n      const box = []\r\n  \r\n      for (let i = 0; i < columns; i++) {\r\n        const cell = new Cell(j, i, rows - 1, columns - 1)\r\n  \r\n        box.push(cell)\r\n      }\r\n      \r\n      setParArr(parArr => [...parArr, box])\r\n    }\r\n\r\n    window.addEventListener('keydown', e => weightHandler(e, 'down'))\r\n    window.addEventListener('keyup', e => weightHandler(e, 'up'))\r\n    \r\n    return () => {\r\n      window.addEventListener('keydown', (e) => weightHandler(e, 'down'))\r\n      window.addEventListener('keyup', (e) => weightHandler(e, 'up'))\r\n    }\r\n    \r\n  }, [reset])\r\n\r\n  const algoRunner = name => {\r\n    if (name === 'astar') aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], setAlgoRunStatus)\r\n    if (name === 'dij') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], true, 'dijkstra', setAlgoRunStatus)\r\n    if (name === 'bfs') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], false, 'breadth_first', setAlgoRunStatus)\r\n    if (name === 'dfs') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat], false, 'depth_first', setAlgoRunStatus)\r\n    // if (name === 'bi_astar') bi_aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n    // setAlgoRunStatus(false)\r\n  }\r\n\r\n  let prevStartLocation = start\r\n  let prevEndLocation = end\r\n  const nodeDragHandler = (e, lon, lat) => {\r\n    e.preventDefault();\r\n\r\n    if (clicked) {\r\n      if(lon !== end.lon || lat !== end.lat) {\r\n        document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className = `square`\r\n        \r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = `${document.getElementById(`Row-${lon}-Col-${lat}`).className} visited start`\r\n        prevStartLocation = {lon, lat}\r\n      } else {\r\n        document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className = `${document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className} visited start`\r\n        setStart(prevStartLocation)\r\n      }\r\n    } else if (destinationClicked) {\r\n      if (lon !== start.lon || lat !== start.lat) {\r\n        document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className = `square`\r\n\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = `${document.getElementById(`Row-${lon}-Col-${lat}`).className} visited end`\r\n        prevEndLocation = {lon, lat}\r\n      } else {\r\n        document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className = `${document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className} visited end`\r\n        setEnd(prevEndLocation)\r\n      }\r\n    }\r\n  }\r\n\r\n  const prevNodeDragHandler = (e, lon, lat) => {\r\n    e.preventDefault();\r\n    \r\n    if (clicked) {\r\n      if(lon !== end.lon || lat !== end.lat) {\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = 'square'\r\n      }\r\n    } else if (destinationClicked) {\r\n      if(lon !== start.lon || lat !== start.lat) {\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = 'square'\r\n      }\r\n    }\r\n  }\r\n\r\n  // setTimeout(() => {\r\n  //   // dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n  //   // aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n  //   depthFirst(parArr)\r\n\r\n  // }, 1000)\r\n  // console.log(destinationClicked)\r\n\r\n  return (\r\n    <div  className=\"App\">\r\n\r\n      <Header \r\n        algoRunner={algoRunner}\r\n        reset={reset}\r\n        setReset={setReset}\r\n        algoRunStatus={algoRunStatus}\r\n        setAlgoRunStatus={setAlgoRunStatus}\r\n        mapCleanStatus={mapCleanStatus}\r\n        setMapCleanStatus={setMapCleanStatus}\r\n      />\r\n\r\n      <div className=\"maze\">\r\n        <div>\r\n          {parArr.map((eachPar, rowIdx) => (\r\n            <div key={`Row-${rowIdx}`} className='flex'>\r\n              {eachPar.map((each, colIdx) => (\r\n                <Node \r\n                  key={`Column-${colIdx}`}\r\n                  cell={each}\r\n                  grid={parArr}\r\n                  start={start}\r\n                  end={end}\r\n                  nodeDragHandler={nodeDragHandler}\r\n                  prevNodeDragHandler={prevNodeDragHandler}\r\n                  setStart={setStart}\r\n                  setEnd={setEnd}\r\n                  clicked={clicked}\r\n                  setClicked={setClicked}\r\n                  destinationClicked={destinationClicked}\r\n                  setDestinationClicked={setDestinationClicked}\r\n                  normalNodeClicked={normalNodeClicked}\r\n                  setNormalNodeClicked={setNormalNodeClicked}\r\n                  weight={weight}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n// https://dmitripavlutin.com/use-react-memo-wisely/\r\n// https://staleclosures.dev/preventing-list-rerenders/\r\n// https://dev.to/maikomiyazaki/completed-javascript-data-structure-course-and-here-is-what-i-learned-about-graph-dijkstra-algorithm-57n8\r\nexport default App;\r\n","import { shortestPath } from '../helpers/algo_helpers.js'\r\n\r\nexport function aStar(nodes, startNode, endNode, setAlgoRunStatus) {\r\n    const openList = []\r\n    const closedList = []\r\n    // This is gonna be the F of the A* algo equation\r\n    startNode.setDistance(0)\r\n    openList.push(startNode)\r\n\r\n    function recursion() {\r\n        let currentNode = openList.sort((node1, node2) => node1.distance - node2.distance).shift()\r\n\r\n        closedList.push(currentNode)\r\n\r\n        if (currentNode === endNode) return shortestPath(endNode, setAlgoRunStatus)\r\n        if (!currentNode) {alert('There is no path to final destination!'); return}\r\n        if (currentNode.isWall) return recursion()\r\n\r\n        currentNode.visit()\r\n        \r\n        document.getElementById(`Row-${currentNode.lon}-Col-${currentNode.lat}`).className = `${document.getElementById(`Row-${currentNode.lon}-Col-${currentNode.lat}`).className} visited`\r\n        let neighbors = currentNode.findNeighbors(nodes, 'AStar')\r\n        for (let n of neighbors) {\r\n            if (closedList.includes(n)) continue\r\n\r\n            //Replace the \"currentNode\" with \"n\" and the path will change!!! \r\n            let HDistance = Math.sqrt(((n.lon - endNode.lon) ** 2) + ((n.lat - endNode.lat) ** 2))\r\n            n.h = currentNode.h + 1\r\n            n.setDistance(n.h + currentNode.weight + HDistance)\r\n\r\n            n.prevNode = currentNode\r\n\r\n            if (!openList.includes(n)) openList.push(n)\r\n        }\r\n\r\n        setTimeout(() => {\r\n            return recursion()\r\n        }, 10)\r\n    }\r\n\r\n    recursion()\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/base.scss';\r\nimport App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n// console.log = console.warn = console.error = console.assert = () => {};\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}