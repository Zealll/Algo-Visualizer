{"version":3,"sources":["node/Node.js","node/Cell.js","header/Header.js","helpers/algo_helpers.js","App.js","algorithms/A_Star.js","algorithms/Dijkstras.js","index.js"],"names":["Node","props","useState","cell","visited","isWall","wall","setWall","onMouseDown","e","preventDefault","lon","start","lat","setClicked","end","setDestinationClicked","setNormalNodeClicked","nodeClickHandler","onMouseUp","clicked","destinationClicked","setStart","setEnd","locationSetter","onMouseEnter","nodeDragHandler","normalNodeClicked","obstacleHandler","onMouseLeave","prevNodeDragHandler","onClick","id","className","Cell","maxLon","maxLat","this","distance","Infinity","north","east","south","west","weight","h","f","prevNode","len","grid","algo","arr","push","filter","each","Header","name","setName","onChange","target","value","algoRunner","shortestPath","endN","shortest","currentNode","unshift","count","animatePath","length","nodeClass","document","getElementById","setTimeout","App","size","window","screen","parArr","setParArr","rows","Math","floor","availHeight","columns","availWidth","useEffect","j","box","i","prevStartLocation","prevEndLocation","nodes","startNode","endNode","openList","closedList","setDistance","recursion","sort","node1","node2","shift","visit","neighbors","findNeighbors","n","includes","HDistance","aStar","func","visitedNodesInOrder","unvisitedNodes","closestNode","alert","dijkstras","map","eachPar","rowIdx","key","colIdx","ReactDOM","render"],"mappings":"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","file":"static/js/main.8d8dc0c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nconst Node = props => {\r\n    const [visited, setVisited] = useState(props.cell.visited)\r\n    const [wall, setWall] = useState(props.cell.isWall)\r\n\r\n    const clickHandler = () => {\r\n        // setVisited(props.cell.visit())\r\n    }\r\n\r\n    const nodeClickHandler = e => {\r\n        e.preventDefault();\r\n        if (props.cell.lon === props.start.lon && props.cell.lat === props.start.lat){\r\n            props.setClicked(true)\r\n        } else if (props.cell.lon === props.end.lon && props.cell.lat === props.end.lat) {\r\n            props.setDestinationClicked(true)\r\n        } else {\r\n            props.setNormalNodeClicked(true)\r\n            setWall(!wall)\r\n            props.cell.isWall = !props.cell.isWall\r\n        }\r\n    }\r\n\r\n    const locationSetter = e => {\r\n        e.preventDefault()\r\n        if (props.clicked) {\r\n            if (props.end.lon !== props.cell.lon || props.end.lat !== props.cell.lat){\r\n                props.setStart({lon: props.cell.lon, lat: props.cell.lat})\r\n            }\r\n        } else if (props.destinationClicked) {\r\n            if (props.start.lon !== props.cell.lon || props.start.lat !== props.cell.lat) {\r\n                props.setEnd({lon: props.cell.lon, lat: props.cell.lat})\r\n            }\r\n        }  \r\n    }\r\n\r\n    const obstacleHandler = e => {\r\n        e.preventDefault()\r\n        if (props.normalNodeClicked) {\r\n            setWall(!wall)\r\n            props.cell.isWall = !props.cell.isWall\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div\r\n          onMouseDown={(e) => nodeClickHandler(e)} \r\n          onMouseUp={(e) => {\r\n              props.setClicked(false); \r\n              props.setDestinationClicked(false); \r\n              props.setNormalNodeClicked(false); \r\n              props.clicked !== props.destinationClicked && locationSetter(e)\r\n            }\r\n          } \r\n          onMouseEnter={(e) => {props.nodeDragHandler(e, props.cell.lon, props.cell.lat); obstacleHandler(e)}} \r\n          onMouseLeave={(e) => props.prevNodeDragHandler(e, props.cell.lon, props.cell.lat)}\r\n          onClick={() => {clickHandler()}} \r\n\r\n          id={`Row-${props.cell.lon}-Col-${props.cell.lat}`} \r\n          className={visited ? `square visited ${props.start.lon === props.cell.lon & props.start.lat === props.cell.lat ? 'start' : ' '} ${props.end.lon === props.cell.lon & props.end.lat === props.cell.lat ? 'end' : ' '}` : `square ${props.start.lon === props.cell.lon & props.start.lat === props.cell.lat ? 'start' : ' '} ${props.end.lon === props.cell.lon & props.end.lat === props.cell.lat ? 'end' : ' '} ${wall ? 'wall' : ''}`}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Node","class Cell {\r\n    constructor(lon, lat, maxLon, maxLat) {\r\n        this.lon = lon\r\n        this.lat = lat\r\n        this.maxLon = maxLon\r\n        this.maxLat = maxLat\r\n        this.distance = Infinity\r\n        this.visited = false\r\n        this.north = this.lon === 0 ? false : true\r\n        this.east = this.lat === this.maxLat ? false : true\r\n        this.south = this.lon === this.maxLon ? false : true\r\n        this.west = this.lat === 0 ? false : true\r\n        this.weight = 0\r\n        this.h = 0\r\n        this.f = 0\r\n        this.prevNode = null\r\n        this.isWall = false\r\n    }\r\n\r\n    visit() {\r\n        this.visited = !this.visited\r\n        return this.visited\r\n    }\r\n\r\n    setDistance(len) {\r\n        this.distance = len\r\n    }\r\n\r\n    findNeighbors(grid, algo) {\r\n        const arr = []\r\n        if (this.north) arr.push(grid[this.lon - 1][this.lat])\r\n        if (this.south) arr.push(grid[this.lon + 1][this.lat])\r\n        if (this.west) arr.push(grid[this.lon][this.lat - 1])\r\n        if (this.east) arr.push(grid[this.lon][this.lat + 1])\r\n        // if (algo === 'AStar'){\r\n        //     if (this.north && this.east) arr.push(grid[this.lon - 1][this.lat + 1])\r\n        //     if (this.south && this.east) arr.push(grid[this.lon + 1][this.lat + 1])\r\n        //     if (this.south && this.west) arr.push(grid[this.lon + 1][this.lat - 1])\r\n        //     if (this.north && this.west) arr.push(grid[this.lon - 1][this.lat - 1])\r\n        // }\r\n\r\n        return arr.filter(each => !each.visited)\r\n    }\r\n\r\n\r\n\r\n    coor() {\r\n        // console.log(this.lon, this.lat, this.maxLon, this.maxLat)\r\n        // console.log('north', this.north)\r\n        // console.log('east', this.east)\r\n        // console.log('south', this.south)\r\n        // console.log('west', this.west)\r\n    }\r\n}\r\n\r\nexport default Cell","import React, { useState, useEffect } from 'react'\r\n\r\nconst Header = props => {\r\n    const [name, setName] = useState('')\r\n\r\n    const selectHandler = e => {\r\n        setName(e.target.value)\r\n    }\r\n\r\n    // console.log('header')\r\n\r\n    return (\r\n        <div>\r\n            <select onChange={selectHandler}>\r\n                <option value='N/A'>Select an Algorithm</option>\r\n                <option value='dijkstra'>Dijkstra</option>\r\n                <option value='astar'>A*</option>\r\n            </select>\r\n            <button onClick={() => props.algoRunner(name)}>Start</button>\r\n            <button onClick={() => {}}>reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","export function shortestPath(endN) {\r\n    const shortest = []\r\n    let currentNode = endN\r\n\r\n    while (currentNode) {\r\n        shortest.unshift(currentNode)\r\n        currentNode = currentNode.prevNode\r\n    }\r\n\r\n    let count = 0\r\n\r\n    function animatePath() {\r\n        if (count < shortest.length) {\r\n            let nodeClass = `Row-${shortest[count].lon}-Col-${shortest[count].lat}`\r\n            document.getElementById(nodeClass).className = `${document.getElementById(nodeClass).className} shortest`\r\n            count += 1\r\n            setTimeout(() => {\r\n                return animatePath()\r\n            }, 20)\r\n            \r\n        }  \r\n    }\r\n\r\n    animatePath()\r\n\r\n    // for (let node of shortest) {\r\n    //     let nodeClass = `Row-${node.lon}-Col-${node.lat}`\r\n    //     document.getElementById(nodeClass).className = `${document.getElementById(nodeClass).className} shortest`\r\n    // }\r\n}","import React, {useState, useEffect} from 'react';\r\n// import logo from './logo.svg';\r\n\r\nimport Node from './node/Node.js'\r\nimport Cell from './node/Cell.js'\r\n\r\nimport Header from './header/Header.js'\r\n\r\n// **** Path Finding Algorithms ****\r\nimport { dijkstras } from './algorithms/Dijkstras.js'\r\nimport { aStar } from './algorithms/A_Star.js'\r\n\r\nimport { depthFirst } from './maze/depthFirst'\r\n\r\n\r\nfunction App() {\r\n  const size = window.screen\r\n  const [parArr, setParArr] = useState([])\r\n  let rows = Math.floor((size.availHeight / 100 * 70) / 20)\r\n  let columns = Math.floor((size.availWidth / 100 * 90) / 20)\r\n  const [start, setStart] = useState({lon: 13, lat: 20})\r\n  const [end, setEnd] = useState({lon: 13, lat: 40})\r\n  const [clicked, setClicked] = useState(false)\r\n  const [destinationClicked, setDestinationClicked] = useState(false)\r\n  const [normalNodeClicked, setNormalNodeClicked] = useState(false) \r\n \r\n  useEffect(() => {\r\n    // parArr = []\r\n    for (let j = 0; j < rows; j++) {\r\n      const box = []\r\n  \r\n      for (let i = 0; i < columns; i++) {\r\n        const cell = new Cell(j, i, rows - 1, columns - 1)\r\n  \r\n        box.push(cell)\r\n      }\r\n      // console.log(Math.floor((size.availHeight / 100 * 70) / 20))\r\n      \r\n      setParArr(parArr => [...parArr, box])\r\n    }\r\n    \r\n  }, [])\r\n  // parArr[13][30].isWall = true\r\n  // parArr[14][30].isWall = true\r\n  // parArr[12][30].isWall = true\r\n  // parArr[14][20].isWall = true\r\n  // parArr[14][21].weight = 5\r\n  // for (let i = 0; i < parArr.length; i++) {\r\n  //   if (i > 5) {\r\n\r\n  //     parArr[i][22].isWall = true\r\n  //   }\r\n  // }\r\n\r\n  const algoRunner = name => {\r\n    if (name === 'astar') aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n    if (name === 'dijkstra') dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n  }\r\n\r\n  let prevStartLocation = start\r\n  let prevEndLocation = end\r\n  const nodeDragHandler = (e, lon, lat) => {\r\n    e.preventDefault();\r\n\r\n    if (clicked) {\r\n      if(lon !== end.lon || lat !== end.lat) {\r\n        document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className = `square`\r\n        \r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = `${document.getElementById(`Row-${lon}-Col-${lat}`).className} visited start`\r\n        prevStartLocation = {lon, lat}\r\n      } else {\r\n        document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className = `${document.getElementById(`Row-${prevStartLocation.lon}-Col-${prevStartLocation.lat}`).className} visited start`\r\n        setStart(prevStartLocation)\r\n      }\r\n    } else if (destinationClicked) {\r\n      if (lon !== start.lon || lat !== start.lat) {\r\n        document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className = `square`\r\n\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = `${document.getElementById(`Row-${lon}-Col-${lat}`).className} visited end`\r\n        prevEndLocation = {lon, lat}\r\n      } else {\r\n        document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className = `${document.getElementById(`Row-${prevEndLocation.lon}-Col-${prevEndLocation.lat}`).className} visited end`\r\n        setEnd(prevEndLocation)\r\n      }\r\n    }\r\n  }\r\n\r\n  const prevNodeDragHandler = (e, lon, lat) => {\r\n    e.preventDefault();\r\n    \r\n    if (clicked) {\r\n      if(lon !== end.lon || lat !== end.lat) {\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = 'square'\r\n      }\r\n    } else if (destinationClicked) {\r\n      if(lon !== start.lon || lat !== start.lat) {\r\n        document.getElementById(`Row-${lon}-Col-${lat}`).className = 'square'\r\n      }\r\n    }\r\n}\r\n\r\n  // setTimeout(() => {\r\n  //   // dijkstras(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n  //   // aStar(parArr, parArr[start.lon][start.lat], parArr[end.lon][end.lat])\r\n  //   depthFirst(parArr)\r\n\r\n  // }, 1000)\r\n  // console.log(destinationClicked)\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <Header algoRunner={algoRunner}/>\r\n      <header className=\"App-header\">\r\n        {parArr.map((eachPar, rowIdx) => (\r\n          <div key={`Row-${rowIdx}`} className='flex'>\r\n            {eachPar.map((each, colIdx) => (\r\n              <Node \r\n                key={`Column-${colIdx}`}\r\n                cell={each}\r\n                grid={parArr}\r\n                start={start}\r\n                end={end}\r\n                nodeDragHandler={nodeDragHandler}\r\n                prevNodeDragHandler={prevNodeDragHandler}\r\n                setStart={setStart}\r\n                setEnd={setEnd}\r\n                clicked={clicked}\r\n                setClicked={setClicked}\r\n                destinationClicked={destinationClicked}\r\n                setDestinationClicked={setDestinationClicked}\r\n                normalNodeClicked={normalNodeClicked}\r\n                setNormalNodeClicked={setNormalNodeClicked}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </header>\r\n      <div>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// https://dmitripavlutin.com/use-react-memo-wisely/\r\n// https://staleclosures.dev/preventing-list-rerenders/\r\n// https://dev.to/maikomiyazaki/completed-javascript-data-structure-course-and-here-is-what-i-learned-about-graph-dijkstra-algorithm-57n8\r\nexport default App;\r\n","import { shortestPath } from '../helpers/algo_helpers.js'\r\n\r\nexport function aStar(nodes, startNode, endNode) {\r\n    const openList = []\r\n    const closedList = []\r\n    // This is gonna be the F of the A* algo equation\r\n    startNode.setDistance(0)\r\n    openList.push(startNode)\r\n\r\n    function recursion() {\r\n        let currentNode = openList.sort((node1, node2) => node1.distance - node2.distance).shift()\r\n\r\n        closedList.push(currentNode)\r\n\r\n        if (currentNode === endNode) return shortestPath(endNode)\r\n        if (!currentNode) return\r\n        if (currentNode.isWall) return recursion()\r\n\r\n        currentNode.visit()\r\n        \r\n        document.getElementById(`Row-${currentNode.lon}-Col-${currentNode.lat}`).className = `${document.getElementById(`Row-${currentNode.lon}-Col-${currentNode.lat}`).className} visited`\r\n        let neighbors = currentNode.findNeighbors(nodes, 'AStar')\r\n        for (let n of neighbors) {\r\n            if (closedList.includes(n)) continue\r\n        \r\n            //Replace the \"currentNode\" with \"n\" and the path will change!!! \r\n            let HDistance = ((n.lon - endNode.lon) ** 2) + ((n.lat - endNode.lat) ** 2)\r\n            n.h = currentNode.h + 1\r\n            n.setDistance(n.h + currentNode.weight + HDistance)\r\n\r\n            n.prevNode = currentNode\r\n\r\n            if (!openList.includes(n)) openList.push(n)\r\n        }\r\n\r\n        setTimeout(() => {\r\n            return recursion()\r\n        }, 10)\r\n    }\r\n\r\n    recursion()\r\n}\r\n\r\n\r\n\r\n","import { shortestPath } from '../helpers/algo_helpers.js'\r\n\r\nexport function dijkstras(nodes, startNode, endNode, func) {\r\n    const visitedNodesInOrder = []\r\n    startNode.setDistance(0)\r\n    const unvisitedNodes = []\r\n    for (let i of nodes) {\r\n        for (let j of i) {\r\n            unvisitedNodes.push(j)\r\n        }\r\n    }\r\n\r\n    function recursion() {\r\n        unvisitedNodes.sort((node1, node2) => node1.distance - node2.distance)\r\n        \r\n        const closestNode = unvisitedNodes.shift()\r\n        if (closestNode.isWall) return recursion()\r\n        if (closestNode.distance === Infinity) {alert('There is no path to final destination!'); return}\r\n        \r\n        closestNode.visit()\r\n        \r\n        visitedNodesInOrder.push(closestNode)\r\n    \r\n        if(closestNode.lon === endNode.lon && closestNode.lat === endNode.lat) return shortestPath(endNode, [])\r\n        \r\n        document.getElementById(`Row-${closestNode.lon}-Col-${closestNode.lat}`).className = `${document.getElementById(`Row-${closestNode.lon}-Col-${closestNode.lat}`).className} visited`\r\n\r\n        const neighbors = closestNode.findNeighbors(nodes)\r\n    \r\n        for (let n of neighbors) {\r\n            n.setDistance(closestNode.distance + 1 + closestNode.weight)\r\n            n.prevNode = closestNode\r\n        }\r\n\r\n        setTimeout(() => {\r\n            return recursion()\r\n        }, 10)\r\n    }\r\n\r\n    recursion()\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/base.scss';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}